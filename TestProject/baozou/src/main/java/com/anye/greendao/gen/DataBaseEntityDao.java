package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qf.administrator.baozou.entity.DataBaseEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_BASE_ENTITY".
*/
public class DataBaseEntityDao extends AbstractDao<DataBaseEntity, Long> {

    public static final String TABLENAME = "DATA_BASE_ENTITY";

    /**
     * Properties of entity DataBaseEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Document_id = new Property(1, String.class, "document_id", false, "DOCUMENT_ID");
        public final static Property Display_type = new Property(2, int.class, "display_type", false, "DISPLAY_TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Iamge = new Property(4, String.class, "iamge", false, "IAMGE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Share_url = new Property(6, String.class, "share_url", false, "SHARE_URL");
        public final static Property Timestamp = new Property(7, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Play_count = new Property(8, String.class, "play_count", false, "PLAY_COUNT");
        public final static Property Comment_count = new Property(9, String.class, "comment_count", false, "COMMENT_COUNT");
        public final static Property Vote_count = new Property(10, String.class, "vote_count", false, "VOTE_COUNT");
        public final static Property Section_name = new Property(11, String.class, "section_name", false, "SECTION_NAME");
        public final static Property Author_id = new Property(12, String.class, "author_id", false, "AUTHOR_ID");
        public final static Property Author_name = new Property(13, String.class, "author_name", false, "AUTHOR_NAME");
        public final static Property Author_avatar = new Property(14, String.class, "author_avatar", false, "AUTHOR_AVATAR");
        public final static Property ReadFlag = new Property(15, String.class, "readFlag", false, "READ_FLAG");
    };


    public DataBaseEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DataBaseEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_BASE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOCUMENT_ID\" TEXT," + // 1: document_id
                "\"DISPLAY_TYPE\" INTEGER NOT NULL ," + // 2: display_type
                "\"TITLE\" TEXT," + // 3: title
                "\"IAMGE\" TEXT," + // 4: iamge
                "\"URL\" TEXT," + // 5: url
                "\"SHARE_URL\" TEXT," + // 6: share_url
                "\"TIMESTAMP\" TEXT," + // 7: timestamp
                "\"PLAY_COUNT\" TEXT," + // 8: play_count
                "\"COMMENT_COUNT\" TEXT," + // 9: comment_count
                "\"VOTE_COUNT\" TEXT," + // 10: vote_count
                "\"SECTION_NAME\" TEXT," + // 11: section_name
                "\"AUTHOR_ID\" TEXT," + // 12: author_id
                "\"AUTHOR_NAME\" TEXT," + // 13: author_name
                "\"AUTHOR_AVATAR\" TEXT," + // 14: author_avatar
                "\"READ_FLAG\" TEXT);"); // 15: readFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_BASE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataBaseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String document_id = entity.getDocument_id();
        if (document_id != null) {
            stmt.bindString(2, document_id);
        }
        stmt.bindLong(3, entity.getDisplay_type());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String iamge = entity.getIamge();
        if (iamge != null) {
            stmt.bindString(5, iamge);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(7, share_url);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(8, timestamp);
        }
 
        String play_count = entity.getPlay_count();
        if (play_count != null) {
            stmt.bindString(9, play_count);
        }
 
        String comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindString(10, comment_count);
        }
 
        String vote_count = entity.getVote_count();
        if (vote_count != null) {
            stmt.bindString(11, vote_count);
        }
 
        String section_name = entity.getSection_name();
        if (section_name != null) {
            stmt.bindString(12, section_name);
        }
 
        String author_id = entity.getAuthor_id();
        if (author_id != null) {
            stmt.bindString(13, author_id);
        }
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(14, author_name);
        }
 
        String author_avatar = entity.getAuthor_avatar();
        if (author_avatar != null) {
            stmt.bindString(15, author_avatar);
        }
 
        String readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindString(16, readFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataBaseEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String document_id = entity.getDocument_id();
        if (document_id != null) {
            stmt.bindString(2, document_id);
        }
        stmt.bindLong(3, entity.getDisplay_type());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String iamge = entity.getIamge();
        if (iamge != null) {
            stmt.bindString(5, iamge);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(7, share_url);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(8, timestamp);
        }
 
        String play_count = entity.getPlay_count();
        if (play_count != null) {
            stmt.bindString(9, play_count);
        }
 
        String comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindString(10, comment_count);
        }
 
        String vote_count = entity.getVote_count();
        if (vote_count != null) {
            stmt.bindString(11, vote_count);
        }
 
        String section_name = entity.getSection_name();
        if (section_name != null) {
            stmt.bindString(12, section_name);
        }
 
        String author_id = entity.getAuthor_id();
        if (author_id != null) {
            stmt.bindString(13, author_id);
        }
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(14, author_name);
        }
 
        String author_avatar = entity.getAuthor_avatar();
        if (author_avatar != null) {
            stmt.bindString(15, author_avatar);
        }
 
        String readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindString(16, readFlag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataBaseEntity readEntity(Cursor cursor, int offset) {
        DataBaseEntity entity = new DataBaseEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // document_id
            cursor.getInt(offset + 2), // display_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iamge
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // share_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timestamp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // play_count
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comment_count
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vote_count
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // section_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // author_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // author_name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // author_avatar
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // readFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataBaseEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDocument_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDisplay_type(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIamge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShare_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlay_count(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComment_count(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVote_count(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSection_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAuthor_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAuthor_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAuthor_avatar(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReadFlag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataBaseEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataBaseEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
